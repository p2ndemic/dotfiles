# =============================================
#    Custom Global Environment Variables
# =============================================
# Ref: https://man.archlinux.org/man/environment.d.5.en
# Ref: https://wiki.archlinux.org/title/Environment_variables
# Ref: https://help.ubuntu.com/community/EnvironmentVariables
# Ref: https://wiki.gentoo.org/wiki/Handbook:X86/Working/EnvVar
# =============================================

# =============================================
#    XDG Base Directory Specification
# =============================================
# Ref: https://specifications.freedesktop.org/basedir-spec/latest
# Ref: https://wiki.archlinux.org/title/XDG_Base_Directory
# =============================================

XDG_CONFIG_HOME=${HOME}/.config
XDG_CACHE_HOME=${HOME}/.cache
XDG_DATA_HOME=${HOME}/.local/share
XDG_STATE_HOME=${HOME}/.local/state
XDG_DATA_DIRS=/usr/local/share:/usr/share
TMPDIR=/tmp


# =============================================
#    XGD User Directories
# =============================================
# Ref: https://wiki.archlinux.org/title/XDG_user_directories
# =============================================
# ➤ English-named directories:
# ➤ LC_ALL=C.UTF-8 xdg-user-dirs-update --force
# =============================================
# ➤ Add user-specific dirs into ~/.config/user-dirs.dirs:
# ➤ mkdir -p ~/Games && xdg-user-dirs-update --set GAMES ~/Games
# =============================================

XDG_DESKTOP_DIR=${HOME}/Desktop
XDG_DOWNLOAD_DIR=${HOME}/Downloads
XDG_TEMPLATES_DIR=${HOME}/Templates
XDG_PUBLICSHARE_DIR=${HOME}/Public
XDG_DOCUMENTS_DIR=${HOME}/Documents
XDG_MUSIC_DIR=${HOME}/Music
XDG_PICTURES_DIR=${HOME}/Pictures
XDG_VIDEOS_DIR=${HOME}/Videos
XDG_GAMES_DIR=${HOME}/Games


# =============================================
#    PATH Environment Variable
# =============================================

PATH=${HOME}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/local/games:/usr/games


# =============================================
#    MANPATH Environment Variable
# =============================================
# Ref: https://linuxcommand.org/lc3_man_pages/man1.html

MANPATH=/usr/share/man:/usr/local/man
INFODIR=/usr/share/info:/usr/local/share/info

# =============================================
#    Editors & Tools
# =============================================
# Ref: https://pubs.opengroup.org/onlinepubs/9799919799

# → Default console text editor
EDITOR=nano

# → Similar to the 'EDITOR' environment variable
# → Apps typically try the value in this variable first before falling back to 'EDITOR' if it isn't set
VISUAL=nano

# → Editor used by 'sudoedit' or 'sudo -e' command. See 'man sudoers'
SUDO_EDITOR=nano

# → Editor for ‘fc’ history command
FCEDIT=nano

# → Program for comparing files
DIFFPROG=meld


# =============================================
#    Terminal Configuration
# =============================================

TERM=xterm-256color
COLORTERM=truecolor

# ============================================
# → [Note] To change terminal in KDE, also edit ~/.config/kdeglobals: 
#
# ➤ [General]
# ➤ TerminalApplication=alacritty
# ➤ TerminalService=Alacritty.desktop
# =============================================


# =============================================
#    Utility Customization
# =============================================
# Ref: https://www.gnu.org/software
# Ref: https://wiki.archlinux.org/title/Color_output_in_console
# =============================================

# → Options
MANROFFOPT="-P -c"
PAGER="sh -c 'col -bx | bat -l man -p'"
MANPAGER="sh -c 'col -bx | bat -l man -p'"
LESS="-R --use-color -Dd+r$Du+b$"

# → Aliases
cat="bat --paging=never"
dir="dir --color=auto"
vdir="vdir --color=auto"
diff="diff --color=auto"
dmesg="dmesg --color=always"
ip="ip -color=auto"
grep="grep --color=auto"
egrep="egrep --color=auto"
fgrep="fgrep --color=auto"


# =============================================
#    Mesa Environment Variables
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#core-mesa-environment-variables
# Ref: https://vulkan.org/user/pages/09.events/vulkanised-2024/Vulkanised-2024-faith-ekstrand-collabora-Iago-toral-igalia.pdf
# Ref: https://docs.mesa3d.org/genindex.html
# Ref: https://docs.mesa3d.org/perf.html
# =============================================

# =============================================
#    Mesa VULKAN Drivers Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-MESA_LOADER_DRIVER_OVERRIDE
# Ref: https://github.com/KhronosGroup/Vulkan-Loader/blob/main/docs/LoaderInterfaceArchitecture.md
# Ref: https://wiki.archlinux.org/title/Intel_graphics
# Ref: https://wiki.archlinux.org/title/AMDGPU
# Ref: https://wiki.archlinux.org/title/OpenGL
# Ref: https://wiki.archlinux.org/title/Vulkan
# Ref: https://gitlab.com/AndrewShark/amd-vulkan-prefixes
# Ref: https://www.phoronix.com/news/Intel-ANV-HASVK-Split-Merged
# Ref: https://www.phoronix.com/news/Intel-HASVK-Old-Vulkan-Gen7-8
# Ref: https://www.phoronix.com/review/amdvlk-radv-rx7900
# =============================================
# ➤ Install packages:
# → Intel: vulkan-intel
# → AMD: vulkan-radeon | amdvlk
# → Core: vulkan-icd-loader, vulkan-headers, vulkan-mesa-layers, vulkan-tools, mesa-tools
# → Optional: vulkan-validation-layers, vulkan-extra-layers
# =============================================
# ➤ Check available drivers: ls -la /lib/dri/
# =============================================

# ── Intel ──
# → Use the modern 'Iris' Gallium3D driver for Intel GPUs (Gen8+)
MESA_LOADER_DRIVER_OVERRIDE=iris

# → Use the Intel 'ANV' Vulkan driver for 64-bit applications (Iris Xe Gen9+) | [-HasVK is outdated-]
VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json

# → Use the Intel 'ANV' Vulkan driver for both 32+64-bit apps
# → Like Steam games and others apps requiring 32-bit support. See instructions below
#VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.i686.json

# =====================================================  
#    Steam Vulkan Wrapper for 32/64-bit Drivers:
# =====================================================  
# 
# 1️⃣ Create wrapper script:
#   ▶ sudo nano /usr/local/bin/steam-vk-wrapper.sh
#
#      #!/bin/env bash
#      export VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.i686.json
#      exec "$@"
#
#   ▶ save and exit
#   ▶ sudo chmod +x /usr/local/bin/steam-vk-wrapper.sh
#  
# 2️⃣ Configure Steam launch options:
#   ▶ Right-click game ➔ Properties ➔ General  
#   ▶ Launch options: steam-vk-wrapper %command%
#
# =====================================================  


# =============================================
#    Mesa VULKAN Layers Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#vulkan-loader-environment-variables
# Ref: https://vulkan.lunarg.com/doc/view/1.3.250.1/windows/layer_configuration.html
# Ref: https://github.com/KhronosGroup/Vulkan-Loader/tree/main/docs
# =============================================

#VK_LAYER_PATH=/usr/share/vulkan/explicit_layer.d:${HOME}/.local/share/vulkan/explicit_layer.d:${HOME}/.config/vulkan/explicit_layer.d
#VK_IMPLICIT_LAYER_PATH=/usr/share/vulkan/implicit_layer.d:${HOME}/.local/share/vulkan/implicit_layer.d:${HOME}/.config/vulkan/implicit_layer.d


# =============================================
#    Mesa Vulkan Window System Integration [WSI] Present Mode Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-MESA_VK_WSI_PRESENT_MODE
# Ref: https://registry.khronos.org/vulkan/specs/latest/man/html/VkPresentModeKHR.html
# =============================================

# → Forces a specific Vulkan present mode for ALL swapchains. 
# → Overriding VkSwapchainCreateInfoKHR::presentMode requested by the application.
# → Valid values map to VkPresentModeKHR as defined by the Vulkan spec:
#
#     "immediate" ➔ VK_PRESENT_MODE_IMMEDIATE_KHR (VSync OFF)
#        - No VBlank wait. Frames are displayed immediately.
#        - Lowest latency, but tearing is possible.
#
#     "mailbox" ➔ VK_PRESENT_MODE_MAILBOX_KHR (VSync with uncapped FPS)
#        - Waits for VBlank. Only the latest frame is kept in a 1-entry queue.
#        - Tear-free, low-latency, but requires driver/WSI support.
#
#     "fifo" ➔ VK_PRESENT_MODE_FIFO_KHR (VSync ON)
#        - Classic V-Sync. Frames queued and displayed at each VBlank.
#        - Tear-free. This mode is guaranteed to be supported on all surfaces.
#
#     "relaxed" ➔ VK_PRESENT_MODE_FIFO_RELAXED_KHR (Adaptive VSync)
#        - Same as FIFO, but if a frame misses the last VBlank, it is displayed
#          immediately instead of waiting for the next VBlank.
#        - Can reduce stutter at the cost of possible tearing when late.
#
# → Useful for enforcing a consistent V-Sync/latency mode
#   Note: Forcing an unsupported mode may cause swapchain creation to fail.
#         See: VkPresentModeKHR in the Vulkan spec for detailed semantics.

#MESA_VK_WSI_PRESENT_MODE=mailbox


# =============================================
#    Mesa Caching settings
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-MESA_SHADER_CACHE_MAX_SIZE
# Ref: https://www.phoronix.com/news/Mesa-Single-File-Cache-Issue
# =============================================

# → Maximum shader cache size (default is 1G)
MESA_SHADER_CACHE_MAX_SIZE=20G
MESA_GLSL_CACHE_MAX_SIZE=20G


# =============================================
#    Mesa OpenCL Hardware Acceleration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-RUSTICL_ENABLE
# Ref: https://wiki.archlinux.org/title/GPGPU
# Ref: https://github.com/intel/compute-runtime
# Ref: https://github.com/oneapi-src/level-zero
# Ref: https://github.com/KhronosGroup/OpenCL-ICD-Loader
# =============================================
# ➤ Install packages [Intel]: intel-compute-runtime, opencl-icd-loader, level-zero-loader (optional), level-zero-headers (optional)
# ➤ Install packages [AMD]: rocm-opencl-runtime, opencl-icd-loader
# ➤ Optional: ocl-icd
# =============================================

# ── Intel OpenCL [Intel Compute Runtime] ──
# → On Intel hardware, the official Intel Compute Runtime for OpenCL offers significantly better performance than the Mesa RusticL implementation.
# → To ensure the correct driver is used, set the OCL_ICD_VENDORS environment variable.
# → See performance comparison: https://www.phoronix.com/review/intel-battlemage-rusticl
OCL_ICD_VENDORS=/etc/OpenCL/vendors/intel.icd

# ── AMD OpenCL [ROCm] ──
# → For AMD GPUs, the Mesa RusticL driver often matches or exceeds the performance of the official ROCm OpenCL driver.
# → RusticL is recommended for general use. Use OCL_ICD_VENDORS to switch to ROCm if needed for specific features.
# → See performance comparison: https://www.phoronix.com/review/rocm-rusticl-strix-halo
#OCL_ICD_VENDORS=/etc/OpenCL/vendors/amdocl64.icd


# ── Intel MESA OpenCL implementation ──
#RUSTICL_ENABLE=iris
#RUSTICL_FEATURES=intel

# ── AMD MESA OpenCL implementation ──
#RUSTICL_ENABLE=radeonsi


# =============================================
#    Mesa Vulkan Video Hardware Acceleration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#anvil-anv-driver-environment-variables
# Ref: https://docs.mesa3d.org/envvars.html#radv-driver-environment-variables
# Ref: https://wiki.archlinux.org/title/Hardware_video_acceleration#Vulkan
# Ref: https://github.com/intel/vpl-gpu-rt
# Ref: https://github.com/mpv-player/mpv/discussions/13909
# =============================================

# ── Intel ──
#ANV_DEBUG=video-decode,video-encode

# ── AMD ──
#RADV_PERFTEST=video_decode,video_encode

# =============================================
#    Mesa VA-API & GStreamer Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#anvil-anv-driver-environment-variables
# Ref: https://www.intel.com/content/www/us/en/developer/tools/vpl/overview.html#gs.m6ihxs
# Ref: https://wiki.archlinux.org/title/Hardware_video_acceleration#Configuring_VA-API
# Ref: https://github.com/intel/libva
# Ref: https://github.com/intel/libvpl
# Ref: https://github.com/intel/media-driver
# Ref: https://github.com/intel/vpl-gpu-rt
# Ref: https://github.com/intel/media-delivery
# =============================================
# Ref: https://gstreamer.freedesktop.org/documentation/gstreamer/running.html?gi-language=c
# Ref: https://gstreamer.freedesktop.org/documentation/va/index.html?gi-language=c
# Ref: https://wiki.archlinux.org/title/GStreamer
# =============================================
# ➤ Install VA-API packages: libva, intel-media-driver[Intel], libva-mesa-driver[AMD], vpl-gpu-rt[Intel]
# ➤ GST packages: gst-libav, gst-plugins-base, gst-plugins-good, gst-plugins-bad, gst-plugins-ugly, gst-plugin-pipewire, gst-plugin-va
# ➤ Other packages: libva-utils
# ➤ Check current driver: vainfo
# =============================================

# ── VA-API ──

# → Enable VAAPI MPEG4 support
VAAPI_MPEG4_ENABLED=1

# → Set VAAPI driver for Intel
LIBVA_DRIVER_NAME=iHD

# → Set VAAPI driver for AMD
#LIBVA_DRIVER_NAME=radeonsi

# → Set VAAPI driver for NVidia [NVDEC]
#LIBVA_DRIVER_NAME=nvidia


# ── GSTREAMER ──

# → Allow GStreamer to use all available VA-API drivers, bypassing the default whitelist
GST_VA_ALL_DRIVERS=1

# → [NVIDIA NVDEC]. Prioritize NVIDIA hardware decoders (nvcodec) over software ones (libav) to ensure HW acceleration.
# GST_PLUGIN_FEATURE_RANK=nvmpegvideodec:MAX,nvmpeg2videodec:MAX,nvmpeg4videodec:MAX,nvh264sldec:MAX,nvh264dec:MAX,nvjpegdec:MAX,nvh265sldec:MAX,nvh265dec:MAX,nvvp9dec:MAX,nvav1dec:MAX


# =============================================
#    Mesa RADV Experimental Features
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-RADV_PERFTEST

#RADV_PERFTEST=sam,transfer_queue

# =============================================
# ▶ sam
# → RADV Force SAM [Smart Access Memory] | (Intel ReBAR requires only UEFI settings)
# =============================================
# ▶ transfer_queue
# → Enable RADV experimental transfer queue support
# =============================================

# =============================================
#    Mesa Other Settings
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#dri-environment-variables

# → Disable MSAA for GLX/EGL MSAA visuals
DRI_NO_MSAA=1

# → DRI_PRIME: select non-default GPU for OpenGL/Vulkan.
# → Syntax:
#    DRI_PRIME=N                ➔ Nth GPU (N>0)
#    DRI_PRIME=pci-0000_02_00_0 ➔ GPU by PCI bus
#    DRI_PRIME=vendor:device    ➔ GPU by IDs
# → For Vulkan, add "!" to expose only that GPU (e.g. DRI_PRIME=1!).
# → Tip: use `lspci -nn | grep VGA` to get bus/IDs.
#DRI_PRIME=1

# =============================================
#    Nvidia Proprietary Driver Environment Variables
# =============================================
# Ref: https://download.nvidia.com/XFree86/Linux-x86_64/580.76.05/README/openglenvvariables.html

# → See: https://github.com/p2ndemic/nvidia-tweaks/blob/main/envvars.txt


# =============================================
#    SDL Environment Variables
# =============================================
# Ref: https://gstreamer.freedesktop.org/documentation/gstreamer/running.html?gi-language=c
# Ref: https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html
# =============================================

# → Can break some native games
# → Run SDL2 applications on Wayland. Remove or set to x11 if games that provide older versions of SDL cause compatibility issues
#SDL_VIDEODRIVER=wayland


# =============================================
#    Wayland Compositors Environment Variables
# =============================================

# → KWin
# See: https://community.kde.org/KWin/Environment_Variables

# → Sway | WLR
# See: https://github.com/swaywm/sway/wiki/Setting-environmental-variables
# See: https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/docs/env_vars.md
# See: https://github.com/rharish101/ReGreet
# See: https://yamadharma.github.io/ru/post/2024/06/20/sway-loading/
WLR_RENDERER=vulkan
GTK_USE_PORTAL=0
QT_WAYLAND_DISABLE_WINDOWDECORATION=1
QT_WAYLAND_FORCE_DPI=physical
GDK_DEBUG=no-portals

# Session
export XDG_SESSION_TYPE=wayland
export XDG_SESSION_DESKTOP=sway
export XDG_CURRENT_DESKTOP=sway:wlroots

# → Niri
# See: https://github.com/YaLTeR/niri/wiki/Configuration:-Miscellaneous

# → Hyprland
# See: https://wiki.hypr.land/Configuring/Environment-variables/#hyprland-environment-variables


# =============================================
#    Wayland Configuration
# =============================================

XDG_SESSION_TYPE=wayland
EGL_PLATFORM=wayland
QT_QPA_PLATFORM=wayland;xcb
GDK_BACKEND=wayland
BEMENU_BACKEND=wayland
CLUTTER_BACKEND=wayland
MOZ_ENABLE_WAYLAND=1
ELECTRON_OZONE_PLATFORM_HINT=wayland
_JAVA_AWT_WM_NONREPARENTING=1


# =============================================
#    HiDPI Settings
# =============================================
# Ref: https://wiki.archlinux.org/title/HiDPI
# Ref: https://doc.qt.io/qt-6/highdpi.html
# Ref: https://wiki.gnome.org/HowDoI/HiDpi/

# ... TODO ...

# =============================================
#    Proton & Wine Configuration
# =============================================

# → See: https://github.com/p2ndemic/dotfiles/blob/main/Proton/user_settings.py

# =============================================
# → Enable Wine-Wayland driver [Only works with GE-Proton10-1++ or Proton-EM-10++]
# → Ref: https://github.com/GloriousEggroll/proton-ge-custom/releases/tag/GE-Proton10-1
PROTON_ENABLE_WAYLAND=1

# → New option for using HDR with Wine-Wayland
#PROTON_ENABLE_HDR=1
# =============================================

# =============================================
# → Enable NTSync [Only works with GE-Proton10-9++ or Proton-EM-10-24++]
# → Ref: https://github.com/GloriousEggroll/proton-ge-custom/releases/tag/GE-Proton10-9

# NOTES: 
# 1. Your kernel must be patched with ntsync patches. If your system does not have /dev/ntsync then your kernel does not have the patches required to use ntsync.
# 2. Some applications, mostly 32 bit, may also need PROTON_USE_WOW64=1 when using ntsync

PROTON_USE_NTSYNC=1
PROTON_USE_WOW64=1
# =============================================

# =============================================
# → Force Wine to enable the LARGE_ADDRESS_AWARE flag for all executables. Enabled by default
PROTON_FORCE_LARGE_ADDRESS_AWARE=1
# =============================================

# =============================================
#    DXVK Configuration
# =============================================
# Ref: https://github.com/doitsujin/dxvk
# Ref: https://github.com/doitsujin/dxvk/wiki/Configuration
# Ref: https://github.com/doitsujin/dxvk/blob/master/dxvk.conf
# =============================================

#DXVK_CONFIG_FILE=${HOME}/.config/dxvk.conf

# =============================================
#    VKD3D Configuration
# =============================================
# https://github.com/HansKristian-Work/vkd3d-proton

# → See: https://github.com/p2ndemic/dotfiles/blob/main/Proton/user_settings.py

# =============================================
#    Gamescope Configuration
# =============================================
# Ref: https://github.com/ValveSoftware/gamescope
# Ref: https://wiki.archlinux.org/title/Gamescope
# Ref: https://zamundaaa.github.io/wayland/2023/12/18/update-on-hdr-and-colormanagement-in-plasma.html
# Ref: https://github.com/ValveSoftware/gamescope/issues/1404
# Ref: https://discourse.nixos.org/t/gamescope-session-flickers-heavily/41510/5
# =============================================

# TODO
# ... ENABLE_GAMESCOPE_WSI=1 ...

# See: https://www.phoronix.com/news/Mesa-Vulkan-WSI-No-Wait-XWay
# vk_khr_present_wait=true
# vk_xwayland_wait_ready=false
# mesa_glthread=true
# MESA_VK_ENABLE_SUBMIT_THREAD=true



# =============================================
# → Gamescope Priority
# =============================================
# Ref: https://wiki.archlinux.org/title/Gamescope#Setting_Gamescopes_priority
# Ref: https://bbs.archlinux.org/viewtopic.php?id=300744
# =============================================

# → Problem:
# The 'gamescope' binary requires the 'CAP_SYS_NICE' capability to manage thread priorities effectively, preventing performance degradation and input lag.
# When the 'gamescope' package is updated via pacman, the binary is overwritten, and causing the warning to reappear.
# ...
# ❯ gamescope -f -- glxgears
# ❯ [gamescope] [Info] console: gamescope version 3.16.15 (gcc 15.1.1)
# ❯ No CAP_SYS_NICE, falling back to regular-priority compute and threads.
# ❯ Performance will be affected.
# ...

# → Solution 1️⃣: [Quick Fix]
# To fix the error immediately (until the next gamescope update), run the following command in your terminal:
# ▶ sudo setcap 'cap_sys_nice=eip' $(which gamescope)

# → Solution 2️⃣: [Permanent Fix] 
# [Pacman Hook to Persistently Grant 'CAP_SYS_NICE' to Gamescope]
# This pacman hook automates the process of reapplying the necessary capability.
# It is triggered automatically every time the 'gamescope' package is installed or upgraded, ensuring the permission is always correctly set.

# → Implementation:
# The following code should be placed in a file like: '/etc/pacman.d/hooks/gamescope-caps.hook'

# =============================================
# ▶️ [Trigger]
# ▶️ Operation = Install
# ▶️ Operation = Upgrade
# ▶️ Type = Package
# ▶️ Target = gamescope
#
# ▶️ [Action]
# ▶️ Description = Granting CAP_SYS_NICE to gamescope to fix performance warnings...
# ▶️ When = PostTransaction
# ▶️ Exec = /usr/bin/setcap 'cap_sys_nice=eip' /usr/bin/gamescope
# =============================================

# → Testing:
# 1️⃣: ❯ gamescope -- glxgears
# 2️⃣: ❯ gamescope --expose-wayland -- vkcube
# 3️⃣: ❯ gamescope --expose-wayland -- vkgears

# =============================================

# https://forum.manjaro.org/t/environment-variables-for-proper-wayland-functionality/143223
# https://wiki.archlinux.org/title/Gaming
# https://dri.freedesktop.org/wiki/ConfigurationOptions/
# https://github.com/AdelKS/LinuxGamingGuide
# https://linux-gaming.kwindu.eu/index.php?title=Main_Page
# https://forum.manjaro.org/t/howto-troubleshoot-crackling-in-pipewire/82442/20

https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/managing_storage_devices/setting-the-disk-scheduler_managing-storage-devices

# =============================================
#    Deployment Instructions
# =============================================
# ▶ File locations:
# ▶ /etc/environment.d/99-environment.conf - system-wide
# ▶ ~/.config/environment.d/99-environment.conf - user-specific

# ▶ After file placement:
# ▶ Reboot
# ▶ Verify variables via: 'printenv' or 'env'
