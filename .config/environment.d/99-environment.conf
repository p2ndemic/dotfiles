# =============================================
#    Custom Global Environment Variables
# =============================================
# Ref: https://wiki.archlinux.org/title/Environment_variables

# =============================================
#    XDG Base Directory Specification
# =============================================
# Ref: https://specifications.freedesktop.org/basedir-spec/latest
# Ref: https://wiki.archlinux.org/title/XDG_Base_Directory
# =============================================

XDG_CONFIG_HOME=${HOME}/.config
XDG_CACHE_HOME=${HOME}/.cache
XDG_DATA_HOME=${HOME}/.local/share
XDG_STATE_HOME=${HOME}/.local/state
XDG_DATA_DIRS=/usr/local/share:/usr/share
TMPDIR=/tmp

# =============================================
#    XGD User Directories
# =============================================
# Ref: https://wiki.archlinux.org/title/XDG_user_directories
# =============================================
# ➤ English-named directories:
# ➤ LC_ALL=C.UTF-8 xdg-user-dirs-update --force
# =============================================
# ➤ Add user-specific dirs into ~/.config/user-dirs.dirs:
# ➤ mkdir -p ~/Games && xdg-user-dirs-update --set GAMES ~/Games
# =============================================

XDG_DESKTOP_DIR=${HOME}/Desktop
XDG_DOWNLOAD_DIR=${HOME}/Downloads
XDG_TEMPLATES_DIR=${HOME}/Templates
XDG_PUBLICSHARE_DIR=${HOME}/Public
XDG_DOCUMENTS_DIR=${HOME}/Documents
XDG_MUSIC_DIR=${HOME}/Music
XDG_PICTURES_DIR=${HOME}/Pictures
XDG_VIDEOS_DIR=${HOME}/Videos
XDG_GAMES_DIR=${HOME}/Games

# =============================================
#    PATH Environment Variable
# =============================================

PATH=${HOME}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/local/games:/usr/games

# =============================================
#    MANPATH Environment Variable
# =============================================
# Ref: https://linuxcommand.org/lc3_man_pages/man1.html

MANPATH=/usr/share/man:/usr/local/man

# =============================================
#    Editors & Tools
# =============================================
# Ref: https://pubs.opengroup.org/onlinepubs/9799919799

# → Default console text editor
EDITOR=nano

# → Similar to the 'EDITOR' environment var. Apps typically try the value in this variable first before falling back to 'EDITOR' if it isn't set
VISUAL=nano

# → Editor used by 'sudoedit' or 'sudo -e' command. See 'man sudoers'
SUDO_EDITOR=nano

# → Editor for ‘fc’ history command
FCEDIT=nano

# → Program for comparing files
DIFFPROG=meld

# =============================================
#    Terminal Configuration
# =============================================

TERM=xterm-256color
COLORTERM=truecolor

# ============================================
# ➤ To change terminal in KDE, also edit ~/.config/kdeglobals: 
#
# ➤ [General]
# ➤ TerminalApplication=alacritty
# ➤ TerminalService=Alacritty.desktop
# =============================================

# =============================================
#    Utility Customization
# =============================================
# Ref: https://www.gnu.org/software
# Ref: https://wiki.archlinux.org/title/Color_output_in_console
# =============================================

# → Options
MANROFFOPT="-P -c"
PAGER="sh -c 'col -bx | bat -l man -p'"
MANPAGER="sh -c 'col -bx | bat -l man -p'"
LESS="-R --use-color -Dd+r$Du+b$"

# → Aliases
cat="bat --paging=never"
dir="dir --color=auto"
vdir="vdir --color=auto"
diff="diff --color=auto"
dmesg="dmesg --color=always"
ip="ip -color=auto"
grep="grep --color=auto"
fgrep="fgrep --color=auto"
egrep="egrep --color=auto"

# =============================================
#    Mesa Environment Variables
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#core-mesa-environment-variables

# =============================================
#    Mesa VULKAN Drivers Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-MESA_LOADER_DRIVER_OVERRIDE
# Ref: https://github.com/KhronosGroup/Vulkan-Loader/blob/main/docs/LoaderInterfaceArchitecture.md
# Ref: https://wiki.archlinux.org/title/Intel_graphics
# Ref: https://wiki.archlinux.org/title/AMDGPU
# Ref: https://wiki.archlinux.org/title/OpenGL
# Ref: https://wiki.archlinux.org/title/Vulkan
# Ref: https://gitlab.com/AndrewShark/amd-vulkan-prefixes
# Ref: https://www.phoronix.com/news/Intel-ANV-HASVK-Split-Merged
# Ref: https://www.phoronix.com/news/Intel-HASVK-Old-Vulkan-Gen7-8
# Ref: https://www.phoronix.com/review/amdvlk-radv-rx7900
# =============================================
# ➤ Install packages:
# ➤ vulkan-intel [Intel], vulkan-radeon[AMD | option #1], amdvlk [AMD | option #2],
# ➤ vulkan-icd-loader, vulkan-headers, vulkan-validation-layers, vulkan-extra-layers, vulkan-mesa-layers, vulkan-tools
# =============================================

# → [Intel]
# → Check the list of drivers via the 'ls -la /lib/dri/' command. For Intel there are two drivers available: 'i915' and 'iris'
#MESA_LOADER_DRIVER_OVERRIDE=i915

# → Use the Intel ANV Vulkan driver for 64-bit applications (Iris Xe Gen9+) | [-HasVK is outdated-]
VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json

# → Use the Intel ANV Vulkan driver for both 32+64-bit apps (like Steam and others requiring 32-bit support. See instructions below)
#VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.i686.json

# =====================================================  
#    Steam Vulkan Wrapper for 32/64-bit Drivers:
# =====================================================  
# 
# 1️⃣ Create wrapper script:
#  ▶ sudo nano /usr/local/bin/steam-vk-wrapper.sh
#
#     #!/bin/env bash
#     export VK_DRIVER_FILES=/usr/share/vulkan/icd.d/intel_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.i686.json
#     exec "$@"
#
#  ▶ save and exit
#  ▶ sudo chmod +x /usr/local/bin/steam-vk-wrapper.sh
#  
# 2️⃣ Configure Steam launch options:
#  ▶ Right-click game ➔ Properties ➔ General  
#  ▶ Launch options: steam-vk-wrapper %command%
#
# =====================================================  

# =============================================
#    Mesa VULKAN Layers Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#vulkan-loader-environment-variables
# Ref: https://vulkan.lunarg.com/doc/view/1.3.250.1/windows/layer_configuration.html
# Ref: https://github.com/KhronosGroup/Vulkan-Loader/tree/main/docs
# =============================================

#VK_LAYER_PATH=/usr/share/vulkan/explicit_layer.d:${HOME}/.local/share/vulkan/explicit_layer.d:${HOME}/.config/vulkan/explicit_layer.d
#VK_IMPLICIT_LAYER_PATH=/usr/share/vulkan/implicit_layer.d:${HOME}/.local/share/vulkan/implicit_layer.d:${HOME}/.config/vulkan/implicit_layer.d

# =============================================
#    MESA_VK_WSI_PRESENT_MODE Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-MESA_VK_WSI_PRESENT_MODE
# Ref: https://registry.khronos.org/vulkan/specs/latest/man/html/VkPresentModeKHR.html
# =============================================

# Mesa Vulkan Window System Integration present mode configuration:
# → Forces a specific Vulkan present mode for ALL swapchains. 
# → Overriding VkSwapchainCreateInfoKHR::presentMode requested by the application.
# → Valid values map to VkPresentModeKHR as defined by the Vulkan spec:
#
#     "immediate" ➔ VK_PRESENT_MODE_IMMEDIATE_KHR (VSync OFF)
#        - No VBlank wait. Frames are displayed immediately.
#        - Lowest latency, but tearing is possible.
#
#     "mailbox" ➔ VK_PRESENT_MODE_MAILBOX_KHR (VSync with uncapped FPS)
#        - Waits for VBlank. Only the latest frame is kept in a 1-entry queue.
#        - Tear-free, low-latency, but requires driver/WSI support.
#
#     "fifo" ➔ VK_PRESENT_MODE_FIFO_KHR (VSync ON)
#        - Classic V-Sync. Frames queued and displayed at each VBlank.
#        - Tear-free. This mode is guaranteed to be supported on all surfaces.
#
#     "relaxed" ➔ VK_PRESENT_MODE_FIFO_RELAXED_KHR (Adaptive VSync)
#        - Same as FIFO, but if a frame misses the last VBlank, it is displayed
#          immediately instead of waiting for the next VBlank.
#        - Can reduce stutter at the cost of possible tearing when late.
#
# → Useful for enforcing a consistent V-Sync/latency mode
#   Note: Forcing an unsupported mode may cause swapchain creation to fail.
#         See VkPresentModeKHR in the Vulkan spec for detailed semantics.

#MESA_VK_WSI_PRESENT_MODE=mailbox

# =============================================
#    Mesa Caching settings
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-MESA_SHADER_CACHE_MAX_SIZE
# Ref: https://www.phoronix.com/news/Mesa-Single-File-Cache-Issue
# =============================================

# → Maximum shader cache size (default is 1G)
MESA_SHADER_CACHE_MAX_SIZE=20G

# =============================================
#    Mesa OpenCL Hardware Acceleration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-RUSTICL_ENABLE
# Ref: https://github.com/intel/compute-runtime
# Ref: https://github.com/oneapi-src/level-zero
# Ref: https://github.com/KhronosGroup/OpenCL-ICD-Loader
# =============================================
# ➤ Install packages [Intel]: intel-compute-runtime, opencl-icd-loader, level-zero-loader (optional), level-zero-headers (optional)
# ➤ Install packages [AMD]: opencl-icd-loader
# =============================================

# → Intel OpenCL
RUSTICL_ENABLE=iris
RUSTICL_FEATURES=intel

# → AMD OpenCL
#RUSTICL_ENABLE=radeonsi

# =============================================
#    Mesa Vulkan Video Hardware Acceleration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#anvil-anv-driver-environment-variables
# Ref: https://docs.mesa3d.org/envvars.html#radv-driver-environment-variables
# Ref: https://wiki.archlinux.org/title/Hardware_video_acceleration#Vulkan
# Ref: https://github.com/intel/vpl-gpu-rt
# Ref: https://github.com/mpv-player/mpv/discussions/13909
# =============================================

# → Intel Vulkan
#ANV_DEBUG=video-decode,video-encode

# → AMD Vulkan
#RADV_PERFTEST=video_decode,video_encode

# =============================================
#    Mesa VAAPI Configuration
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#anvil-anv-driver-environment-variables
# Ref: https://www.intel.com/content/www/us/en/developer/tools/vpl/overview.html#gs.m6ihxs
# Ref: https://github.com/intel/libva
# Ref: https://github.com/intel/libvpl
# Ref: https://github.com/intel/media-driver
# Ref: https://github.com/intel/vpl-gpu-rt
# Ref: https://github.com/intel/media-delivery
# =============================================
# ➤ Install packages: libva, intel-media-driver[Intel], libva-mesa-driver[AMD], vpl-gpu-rt[Intel], gst-plugin-va
# ➤ Other packages: gst-plugins-base, gst-plugins-good, gst-plugins-bad, gst-plugins-ugly, gst-plugin-pipewire
# =============================================

# → Enable VAAPI MPEG4 support
VAAPI_MPEG4_ENABLED=1

# =============================================
#    Mesa RADV Experimental Features
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#envvar-RADV_PERFTEST

#RADV_PERFTEST=sam,transfer_queue

# =============================================
# ▶ sam
# → RADV Force SAM [Smart Access Memory] | (Intel ReBAR requires only UEFI settings)
# =============================================
# ▶ transfer_queue
# → Enable RADV experimental transfer queue support
# =============================================

# =============================================
#    Mesa Other Settings
# =============================================
# Ref: https://docs.mesa3d.org/envvars.html#dri-environment-variables

DRI_NO_MSAA=1

# =============================================
#    Wayland Configuration
# =============================================

EGL_PLATFORM=wayland
QT_QPA_PLATFORM=wayland
GDK_BACKEND=wayland
BEMENU_BACKEND=wayland
CLUTTER_BACKEND=wayland
ELECTRON_OZONE_PLATFORM_HINT=wayland
MOZ_ENABLE_WAYLAND=1
_JAVA_AWT_WM_NONREPARENTING=1

# =============================================
#    Proton & Wine Configuration
# =============================================

# → See: https://github.com/p2ndemic/dotfiles/blob/main/Proton/user_settings.py

# =============================================
# → Enable Wine-Wayland driver [Only works with GE-Proton10-1++ or Proton-EM-10++]
# → Ref: https://github.com/GloriousEggroll/proton-ge-custom/releases/tag/GE-Proton10-1
PROTON_ENABLE_WAYLAND=1

# → New option for using HDR with Wine-Wayland
#PROTON_ENABLE_HDR=1
# =============================================

# =============================================
# → Enable NTSync [Only works with GE-Proton10-9++ or Proton-EM-10-24++]
# → Ref: https://github.com/GloriousEggroll/proton-ge-custom/releases/tag/GE-Proton10-9

# NOTES: 
# 1. Your kernel must be patched with ntsync patches. If your system does not have /dev/ntsync then your kernel does not have the patches required to use ntsync.
# 2. Some applications, mostly 32 bit, may also need PROTON_USE_WOW64=1 when using ntsync

PROTON_USE_NTSYNC=1
PROTON_USE_WOW64=1
# =============================================

# =============================================
# → Force Wine to enable the LARGE_ADDRESS_AWARE flag for all executables. Enabled by default
PROTON_FORCE_LARGE_ADDRESS_AWARE=1
# =============================================

# → Added a stub implementation for amdxc64.dll to enable FSR4. Use FSR4_UPGRADE=1 to upgrade FSR3.1 games to FSR4
#FSR4_UPGRADE=1


# =============================================
#    DXVK Configuration
# =============================================
# Ref: https://github.com/doitsujin/dxvk
# Ref: https://github.com/doitsujin/dxvk/wiki/Configuration
# Ref: https://github.com/doitsujin/dxvk/blob/master/dxvk.conf
# =============================================

#DXVK_CONFIG_FILE=${HOME}/.config/dxvk.conf

# =============================================
#    VKD3D Configuration
# =============================================
# https://github.com/HansKristian-Work/vkd3d-proton

# → See: https://github.com/p2ndemic/dotfiles/blob/main/Proton/user_settings.py

# =============================================
#    Gamescope Configuration
# =============================================
# Ref: https://github.com/ValveSoftware/gamescope
# Ref: https://wiki.archlinux.org/title/Gamescope
# =============================================

# TODO
# ... ENABLE_GAMESCOPE_WSI=1 ...

# =============================================
#    Deployment Instructions
# =============================================
# ▶ File locations:
# ▶ /etc/environment.d/99-environment.conf - system-wide
# ▶ ~/.config/environment.d/99-environment.conf - user-specific

# ▶ After file placement:
# ▶ Reboot
# ▶ Verify variables via: 'printenv' or 'env'
